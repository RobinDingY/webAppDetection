# -*- coding: utf-8 -*-
"""utils.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ENJT2LsWb_k2Adi6kTMLk3BguoxjKop9
"""

import cv2
import numpy as np

def drawLinesOnHand(out_img,hand_keypoints):
    x_list = []
    y_list = []
    part_index = []
    StructuredLandmarks = []
    for kp_idx,point in enumerate(hand_keypoints):
        x, y= point
        StructuredLandmarks.append({'x':x, 'y':y})
        x_list.append(int(x))
        y_list.append(int(y))
        part_index.append(kp_idx)

        cv2.circle(out_img, (int(x), int(y)), radius=3, color=(0, 255, 255), thickness=-1,lineType=cv2.FILLED)


    draw_sequence = [[0,1,2,3,4],[0,5,6,7,8],[9,10,11,12],[13,14,15,16],[0,17,18,19,20],[5,9,13,17]]
    for count,draw_seq in enumerate(draw_sequence):
        try:
            if count == 0:
                for i in  range(len(draw_seq)-1):     
                    cv2.line(out_img,(x_list[part_index.index(draw_seq[i])],y_list[part_index.index(draw_seq[i])]),\
                        (x_list[part_index.index(draw_seq[i+1])],y_list[part_index.index(draw_seq[i+1])]),(255,0,0),1)
                continue
            for i in range(len(draw_seq)-1):
                cv2.line(out_img,(x_list[part_index.index(draw_seq[i])],y_list[part_index.index(draw_seq[i])]),\
                            (x_list[part_index.index(draw_seq[i+1])],y_list[part_index.index(draw_seq[i+1])]),(0,255,0),1)
        except:
            pass

def singleHandDetection_2dmodel(img_bgr, hand_tracker, cropped = False, blank = False, hasHand = True):
    hasHand = True
    # img_bgr = cv2.imread(image_path)
    img_rgb = img_bgr[:,:,::-1]
    out_img = np.copy(img_bgr)

    height, width, depth = img_rgb.shape

    try:
        hand_keypoints, box = hand_tracker(img_rgb)# key points and bound box #(2,21,3),(2,4,2) 
        hand_keypoints, box = np.array(hand_keypoints),np.array(box)
        top = int(min(max(box[:, 1]),height))  
        bot = int(max(min(box[:, 1]),0))
        left = int(max(min(box[:, 0]),0))
        right = int(min(max(box[:, 0]),width))

        if blank:
            img_blank = np.zeros((height, width, depth), np.uint8)    
            img_blank.fill(255) 
            out_img = img_blank
      
        drawLinesOnHand(out_img,hand_keypoints)

        if cropped:
            top = int(min(max(box[:, 1]),height))  
            bot = int(max(min(box[:, 1]),0))
            left = int(max(min(box[:, 0]),0))
            right = int(min(max(box[:, 0]),width))

            out_img = out_img[bot : top, left : right]
        
    except:
        print('No hands found')
        hasHand = False

    return out_img, hasHand

def multiHandDetection(img_bgr, hand_tracker):

    # img_bgr = cv2.imread(image_path)
    img_rgb = img_bgr[:,:,::-1]
    out_img = np.copy(img_bgr)

    height, width, depth = img_rgb.shape


    try:
        hand_keypoints, box = hand_tracker(img_rgb)# key points and bound box #(2,21,3),(2,4,2) 
        hand_keypoints, box = np.array(hand_keypoints),np.array(box)

        for hand_keypoints, box in zip(hand_keypoints,box):
            if hand_keypoints is None:
                continue      
            drawLinesOnHand(out_img,hand_keypoints[:,0:2])

        
    except:
        print('No hands found')

    return out_img

def singleHandDetection(img_bgr, hand_tracker, cropped = False, blank = False, hasHand = True):
    hasHand = True
    img_rgb = img_bgr[:,:,::-1]
    out_img = np.copy(img_bgr)
    height, width, depth = img_rgb.shape

    try:
        hand_keypoints, box = hand_tracker(img_rgb)# key points and bound box #(2,21,3),(2,4,2) 
        hand_keypoints, box = np.array(hand_keypoints),np.array(box)
        hand_keypoints.resize(21,3)
        box.resize(4,2)
        top = int(min(max(box[:, 1]),height))  
        bot = int(max(min(box[:, 1]),0))
        left = int(max(min(box[:, 0]),0))
        right = int(min(max(box[:, 0]),width))

        if blank:
            img_blank = np.zeros((height, width, depth), np.uint8)    
            img_blank.fill(255) 
            out_img = img_blank
        
        drawLinesOnHand(out_img,hand_keypoints[:,:2])
        if cropped:
            top = int(min(max(box[:, 1]),height))  
            bot = int(max(min(box[:, 1]),0))
            left = int(max(min(box[:, 0]),0))
            right = int(min(max(box[:, 0]),width))
        
            out_img = out_img[bot : top, left : right]
            
    except:
#         print('No hands found')
        hasHand = False

    return out_img, hasHand, hand_keypoints